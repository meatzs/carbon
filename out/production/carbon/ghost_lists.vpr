define ERROR (0)

domain map {
    function map_fst(xs: Ref): Ref
    axiom map_empty { map_fst(null) == null}
}

function mem_assoc(x: Ref, xys: Ref): Bool
{
    mem(x, map_fst(xys))
}

function mem(x: Ref, xys: Ref): Bool

predicate strong_ghost_list(id: Int, xs: Ref)

predicate ghost_list(id: Int, xs: Ref) {
    // strong_ghost_list<t>(id, xs) &*& ghost_list_member_handles(id, xs);
    strong_ghost_list(id, xs) && ghost_list_member_handles(id, xs)
}

predicate ghost_assoc_list(id: Int, xs: Ref){
    // ghost_list(id, map(fst, xs))
    ghost_list(id, map_fst(xs))
}

predicate ghost_list_member_handle(id: Int, x: Ref)

predicate ghost_assoc_list_member_handle(id: Int, x: Ref) {
    ghost_list_member_handle(id, x)
}

predicate ghost_list_member_handles(id: Int, xs: Ref)

function dummy(): Perm ensures result > none

// lemma void ghost_list_member_handles_extract<t>(t x)
method ghost_list_member_handles_extract(x: Ref, id: Int, xs: Ref, f: Perm)
    // requires [?f]ghost_list_member_handles<t>(?id, ?xs) &*& mem(x, xs) == true;
    requires acc(ghost_list_member_handles(id, xs), f) && mem(x, xs)
    // ensures [f]ghost_list_member_handles<t>(id, xs) &*& [_]ghost_list_member_handle(id, x);
    ensures acc(ghost_list_member_handles(id, xs), f) && acc(ghost_list_member_handle(id, x), dummy())
/*{
    // open [f]ghost_list_member_handles(id, xs);
    unfold acc(ghost_list_member_handles(id, xs), f)
    switch (xs) {
    case nil:
    case cons(x0, xs0):
        if (x0 == x) {
        } else {
            ghost_list_member_handles_extract(x);
        }
    }
    close [f]ghost_list_member_handles(id, xs);
}
*/

// lemma void ghost_list_create_member_handle<t>(int id, t x)
method ghost_list_create_member_handle(id: Int, x: Ref, f1: Perm, xs: Ref)
    // requires [?f1]ghost_list(id, ?xs) &*& mem(x, xs) == true;
    //requires acc(ghost_list(id, xs), f1) && mem(x, xs)
    // ensures [f1]ghost_list(id, xs) &*& [_]ghost_list_member_handle(id, x);
    //ensures acc(ghost_list(id, xs), f1) && acc(ghost_list_member_handle(id, x), dummy())
{
    //open [f1]ghost_list(id, xs);
    if (ERROR == 1) {
        unfold acc(ghost_list(id, xs))
    }
    else {
        unfold acc(ghost_list(id, xs), f1)
    }
    ghost_list_member_handles_extract(x, id, xs, f1)
    // close [f1]ghost_list(id, xs);
    fold acc(ghost_list(id, xs), f1)
}

// lemma void ghost_assoc_list_create_member_handle(int id, void **x)
method ghost_assoc_list_create_member_handle(id: Int, x: Ref, f1: Perm, xys: Ref)
    //requires [?f1]ghost_assoc_list(id, ?xys) &*& mem_assoc(x, xys) == true;
    //requires acc(ghost_assoc_list(id, xys), f1) && mem_assoc(x, xys)
    // ensures [f1]ghost_assoc_list(id, xys) &*& [_]ghost_assoc_list_member_handle(id, x);
    //ensures acc(ghost_assoc_list(id, xys), f1) && acc(ghost_assoc_list_member_handle(id, x), dummy())
{
    // open [f1]ghost_assoc_list(id, xys);
    unfold acc(ghost_assoc_list(id, xys), f1)
    ghost_list_create_member_handle(id, x, f1, map_fst(xys))
    // close [f1]ghost_assoc_list(id, xys);
    fold acc(ghost_assoc_list(id, xys), f1)
    // assert [?f]ghost_list_member_handle(id, x);
    var f: Perm := perm(ghost_list_member_handle(id, x))
    assert acc(ghost_list_member_handle(id, x), f)
    // close [f]ghost_assoc_list_member_handle(id, x);
    fold acc(ghost_assoc_list_member_handle(id, x), f)
    // f := none
}

method ghost_assoc_list_add(id: Int, x: Ref, xys: Ref) returns (xyz: Ref)
    requires ghost_assoc_list(id, xys)
    ensures ghost_assoc_list(id, xyz) && mem_assoc(x, xyz)

// lemma void ghost_assoc_list_create_member_handle(int id, void **x)
method client(id: Int, x: Ref, xys: Ref) {
    inhale ghost_assoc_list(id, xys)
    var xyz: Ref
    xyz := ghost_assoc_list_add(id, x, xys)
    ghost_assoc_list_create_member_handle(id, x, 1/2, xyz)
    if (ERROR == 2) {
        assert ghost_assoc_list(id, xys) && acc(ghost_assoc_list_member_handle(id, x), dummy())
    }
    else {
        assert ghost_assoc_list(id, xyz) && acc(ghost_assoc_list_member_handle(id, x), dummy())
    }
}
