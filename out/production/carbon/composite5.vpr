/*
Partial Viper encoding of https://github.com/verifast/verifast/blob/master/examples/composite5.c
*/

define ERROR (0)
// Modularly verifies in 20s
// A. --entry client_get_parent --SI 2 / 3, 1
// 0) 
// No error
// 1) 
// [0] Folding tree_membership_fact(id_1, node_1) might fail. There might be insufficient permission to access ghost_list_member_handle(id_1, node_1). (composite5.vpr@365.5)
// [1] Assert might fail. There might be insufficient permission to access tree_membership_fact(id, p). (composite5.vpr@378.9)
// 2) 
// [0] The precondition of method foreach_unremove might not hold. There might be insufficient permission to access foreach_node(id_1, remove(nodes_1, p_1)). (composite5.vpr@342.9)
// [1] The precondition of method foreach_unremove might not hold. There might be insufficient permission to access Node(id_1, p_1, dummy() / 2). (composite5.vpr@342.9)
// B. --entry client_tree_add --SI 2 / 5, 1
// 0) 
// No error
// 1) 
// [0] Folding tree(id_1, Seq(n_1) ++ nodes_1) might fail. There might be insufficient permission to access ghost_list(id_1, Seq(n_1) ++ nodes_1). (composite5.vpr@302.5)

// Overall
// LOC: 5 + 2 + 13 + 10 + 2 + 18 + 10 + 24 + 17
// Annot: 6 + 2 + 2

// LOC (fields): 5
field childrenGhostListId: Int // Ghost
field firstChild: Ref
field nextSibling: Ref
field parent: Ref

// Ghost field
field fchildren: Seq[Ref]

// LOC: 2
function dummy(): Perm
    ensures result > none && result < write

// ----------------------------------------------------
// Handling foreach
// ----------------------------------------------------

// LOC: 13

function remove(l: Seq[Ref], x: Ref): Seq[Ref]

predicate foreach_node(id: Int, nodes: Seq[Ref])

method foreach_remove(id: Int, nodes: Seq[Ref], node: Ref)
    requires foreach_node(id, nodes) && node in nodes
    ensures foreach_node(id, remove(nodes, node)) && Node(id, node, dummy())

method foreach_unremove(id: Int, nodes: Seq[Ref], node: Ref, p: Perm)
    requires foreach_node(id, remove(nodes, node)) && Node(id, node, p) && node in nodes && p > none
    ensures foreach_node(id, nodes)

method foreach_empty(id: Int)
    ensures foreach_node(id, Seq())

method foreach_fold(id: Int, nodes: Seq[Ref], node: Ref, p: Perm)
    requires foreach_node(id, nodes) && Node(id, node, p) && p > none
    ensures foreach_node(id, Seq(node) ++ nodes)

// ----------------------------------------------------
// Ghost lists
// ----------------------------------------------------

// LOC: 10

predicate ghost_list(id: Int, xs: Seq[Ref])

predicate ghost_list_member_handle(id: Int, n: Ref)

// Ghost: f1, f2
method ghost_list_member_handle_lemma(id: Int, d: Ref, f1: Perm, ds: Seq[Ref], f2: Perm)
    requires acc(ghost_list(id, ds), f1) && acc(ghost_list_member_handle(id, d), f2)
    ensures acc(ghost_list(id, ds), f1) && acc(ghost_list_member_handle(id, d), f2) && d in ds

method create_ghost_list() returns (id: Int)
    ensures ghost_list(id, Seq())

method ghost_list_add(id: Int, d: Ref, ds: Seq[Ref])
    requires ghost_list(id, ds)
    ensures ghost_list(id, Seq(d) ++ ds) && acc(ghost_list_member_handle(id, d), dummy())

// ----------------------------------------------------
// Predicates for tree
// ----------------------------------------------------

// LOC: 2
predicate Children(c: Ref, children: Seq[Ref]) {
    c == null ? children == Seq() : c == children[0] && acc(c.nextSibling) && Children(c.nextSibling, children[1..])
}

/*
predicate child(id: Int, parent_arg: Ref, c: Ref, p: Perm) {
    acc(ghost_list_member_handle(id, c), 1/2) &&
    acc(c.parent, 1/2) && c.parent == parent_arg
}
*/

// LOC: 13 + 2 + 2 + 1 = 18
// p represents a wildcard
predicate Node(id: Int, n: Ref, p: Perm) {
    n != null &&
    acc(n.firstChild) &&
    acc(n.fchildren) && // Custom
    acc(n.childrenGhostListId, p) &&
    acc(n.parent, 1/2) &&
    // Children(n.firstChild, n.fchildren) &&
    // foreach2(children, ?childrenCounts, child(id, n)) &*&
    // n.count == 1 + sum(childrenCounts) &&
    ghost_list(n.childrenGhostListId, n.fchildren) &&
    (n.parent == null ?
    acc(n.parent, 1/2) && acc(n.nextSibling)
  :
    (n.parent != n &&
    acc(ghost_list_member_handle(id, n.parent), p) &&   // My parent is in the tree.
    acc(n.parent.childrenGhostListId, p) &&
    acc(ghost_list_member_handle(n.parent.childrenGhostListId, n), p)))
}

predicate tree(id: Int, nodes: Seq[Ref]) {
    ghost_list(id, nodes) && foreach_node(id, nodes)
}

predicate tree_membership_fact(id: Int, n: Ref) {
    ghost_list_member_handle(id, n)
}

predicate tree_id(id: Int) {true}

// ----------------------------------------------------
// Methods
// ----------------------------------------------------

// LOC: 10
// Annot: 6
method create_node(p: Ref, next: Ref) returns (n: Ref)
    ensures n != null && acc(n.childrenGhostListId, dummy())
    && ghost_list(n.childrenGhostListId, Seq()) &&
    acc(n.firstChild) && n.firstChild == null &&
    acc(n.nextSibling) && n.nextSibling == next &&
    acc(n.parent) && n.parent == p &&
    acc(n.fchildren) && n.fchildren == Seq() // Added
{
    // struct node *n = malloc(sizeof(struct node));
    n := new(*)


    // if (n == 0) abort();
    // Ignored
    //@ int childrenGhostListId = create_ghost_list();
    var childrenGhostListIdVar: Int
    childrenGhostListIdVar := create_ghost_list()
    //@ n->childrenGhostListId = childrenGhostListId;
    n.childrenGhostListId := childrenGhostListIdVar
    //@ leak node_childrenGhostListId(n, childrenGhostListId);
    exhale acc(n.childrenGhostListId, 1/1 - dummy())
    // n->firstChild = 0;
    n.firstChild := null
    // n->nextSibling = next;
    n.nextSibling := next
    // n->parent = p;
    n.parent := p
    // n->count = 1;
    // Ignored
    //@ leak malloc_block_node(n);
    // Ignored
    // return n;
    // Ignored
    n.fchildren := Seq() // ghost
}

method helper() {assert true}

// struct node *tree_add(struct node *node)
// Ghost: id, nodes
// LOC: 24
// Annot: 2
method tree_add(node: Ref, id: Int, nodes: Seq[Ref], p: Perm) returns (n: Ref)
    //@ requires tree(?id) &*& [_]tree_membership_fact(id, node);
    requires tree(id, nodes) && acc(tree_membership_fact(id, node), p) && p > none && p <= dummy()
    //@ ensures tree(id) &*& [_]tree_membership_fact(id, result);
    ensures tree(id, Seq(n) ++ nodes) && acc(tree_membership_fact(id, n), p)
{
    //@ open tree(_);
    unfold tree(id, nodes)

    //@ open tree_membership_fact(_, _);
    unfold acc(tree_membership_fact(id, node), p)

    //@ ghost_list_member_handle_lemma(id, node);
    ghost_list_member_handle_lemma(id, node, write, nodes, p)
    //@ assert ghost_list(id, ?nodes);
    assert ghost_list(id, nodes)
    //@ foreach_remove(node, nodes);
    foreach_remove(id, nodes, node)
    assert foreach_node(id, remove(nodes, node)) // Helper

    //@ open node(id)(node);
    unfold Node(id, node, dummy())

    // struct node *n = create_node(node, node->firstChild);
    n := create_node(node, node.firstChild)
    // n is fresh, as well as its id
    assume n != node.parent
    assume n.parent.childrenGhostListId != id

    // node->firstChild = n;
    node.firstChild := n
    // Update ghost field fchildren
    node.fchildren := Seq(n) ++ node.fchildren // Added

    //@ close tree_id(id);
    fold tree_id(id)

    //@ close children(n, _);
    // Ignored
    //@ assert [_]node->childrenGhostListId |-> ?childrenGhostListId;
    assert acc(node.childrenGhostListId, wildcard)

    //@ ghost_list_add(childrenGhostListId, n);
    ghost_list_add(node.childrenGhostListId, n, node.fchildren[1..])

    //@ leak ghost_list_member_handle(childrenGhostListId, n);
    // Ignored

    //@ ghost_list_add(id, n);
    if (ERROR == 0) {
        ghost_list_add(id, n, nodes)
    }
    else {
        ghost_list_add(id, node, nodes)
    }

    //@ leak ghost_list_member_handle(id, n);
    // Ignored

    //@ close child(id, node)(n, 1);
    // fold child(id, node, n)

    //@ close children(0, nil);
    // fold Children(null, Seq())
    //@ close foreach2(nil, nil, child(id, n));
    // Ignored

    //@ assert [?f]ghost_list_member_handle(id, n);
    var f: Perm := perm(ghost_list_member_handle(id, n))
    //@ close [f]tree_membership_fact(id, n);
    fold acc(tree_membership_fact(id, n), f)

    helper()

    //@ close node(id)(n);
    fold Node(id, n, p / 2)

    //@ close foreach(cons(n, remove(node, nodes)), node(id));
    //@ assert foreach2<struct node *, int>(?children, ?childrenCounts, child(id, node));
    //@ close foreach2(cons(n, children), cons(1, childrenCounts), child(id, node));
    // add_to_count(node, 1);
    // Ignored

    // return n
    // Ignored
    
    fold Node(id, node, p / 2)
    foreach_unremove(id, nodes, node, p / 2)

    foreach_fold(id, nodes, n, p / 2)
    fold tree(id, Seq(n) ++ nodes)
}

// struct node *tree_get_parent(struct node *node)
// Ghost: id, nodes
// LOC: 17
// Annot: 2
method tree_get_parent(node: Ref, id: Int, nodes: Seq[Ref], w: Perm) returns (p: Ref)
    //@ requires tree(?id) &*& [_]tree_membership_fact(id, node);
    requires tree(id, nodes) && acc(tree_membership_fact(id, node), w) && w > none && w <= dummy()
    //@ ensures tree(id) &*& (result == 0 ? true : [_]tree_membership_fact(id, result));
    ensures tree(id, nodes) && (p == null ? true : acc(tree_membership_fact(id, p), dummy() / 2))
{

    //@ open tree(id);
    unfold tree(id, nodes)

    //@ open tree_membership_fact(id, node);
    // var f: Perm := perm(tree_membership_fact(id, node))
    unfold acc(tree_membership_fact(id, node), w)

    //@ ghost_list_member_handle_lemma(id, node);
    ghost_list_member_handle_lemma(id, node, write, nodes, w)
    //@ assert ghost_list(id, ?nodes);
    assert ghost_list(id, nodes)
    //@ foreach_remove(node, nodes);
    assert node in nodes
    foreach_remove(id, nodes, node)
    //@ open node(id)(node);
    // unfold Node(id, node)

    helper()

    unfold Node(id, node, dummy())
    // struct node *p = node->parent;
    if (ERROR != 1) {
        p := node.parent
    }
    //@ close node(id)(node);
    fold Node(id, node, dummy() / 2)

    //@ foreach_unremove(node, nodes);
    if (ERROR == 2) {
        foreach_unremove(id, nodes, p, dummy() / 2)
    }
    else {
        foreach_unremove(id, nodes, node, dummy() / 2)
    }
    //@ close tree(id);
    fold tree(id, nodes)

    /*@
    if (p != 0) {
        assert [?f]ghost_list_member_handle(id, p);
        close [f]tree_membership_fact(id, p);
    }
    @*/

    if (p != null) {
        var f: Perm
        f := perm(ghost_list_member_handle(id, p))
        fold acc(tree_membership_fact(id, p), f)
    }
    
    // return p;
    // Ignored
    
    fold acc(tree_membership_fact(id, node), w)
}

// ----------------------------------------------------
// Client
// ----------------------------------------------------

method client_get_parent(node: Ref, id: Int, nodes: Seq[Ref])
    requires tree(id, nodes) && acc(tree_membership_fact(id, node), dummy())
{
    var p: Ref
    p := tree_get_parent(node, id, nodes, dummy())
    if (p != null) {
        assert acc(tree_membership_fact(id, p), wildcard)
    }
}

method client_tree_add(node: Ref, id: Int, nodes: Seq[Ref])
    requires tree(id, nodes) && acc(tree_membership_fact(id, node), dummy())
{
    var left: Ref
    left := tree_add(node, id, nodes, dummy())
    assert acc(tree_membership_fact(id, left), wildcard)
}