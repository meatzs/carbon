include "../include/bstree_rec.spl";

lemma unfold(r: Node)
  requires tree(r) &*& r != null
  ensures acc(r) &*& tree(r.left) &*& tree(r.right)
{
}

procedure destroy(root: Node)
  requires tree(root);
  ensures emp;
{
  if (root != null) {
    destroy(root.left);
    destroy(root.right);
    free root;
  }
}

procedure extract_max(root: Node)
  returns (others: Node, max: Node)
  requires tree(root) &*& root != null;
  ensures tree(others) &*& acc(max);
  ensures max.right == null
{
  if (root.right != null) {
    var c: Node, m: Node;
    c, m := extract_max(root.right); 
    root.right := c;
    return root, m;
  } else {
    var c: Node;
    c := root.left;
    unfold(root);
    return c, root;
  }
}

procedure insert(root: Node, value: Int)
  returns (new_root: Node)
  requires tree(root);
  ensures tree(new_root);
{
  if (root == null) {
    var t := new Node;
    t.left := null;
    t.right := null;
    t.data := value;
    return t;
  } else { 
    var n: Node;
    if (root.data > value) {
      n := insert(root.left, value);
      root.left := n;
      return root;
    } else if (root.data < value) {
      n := insert(root.right, value);
      root.right := n;
      return root;
    } 
    return root;
  }
}

procedure remove(root: Node, value: Int)
  returns (res: Node)
  requires tree(root);
  ensures tree(res);
{
  if (root == null) {
    return null;
  } else if (root.data == value) {
    unfold(root);
    if (root.left == null && root.right == null) {
      free(root);
      return null;
    } else if (root.left != null && root.right == null) {
      res := root.left;
      free(root);
      assert tree(root.left) &*& tree(root.right);
      return res;
    } else if (root.left == null && root.right != null) {
      res := root.right;
      free(root);
      assert tree(root.left) &*& tree(root.right);
      return res;
    } else {
      var l: Node, m: Node;
      l, m := extract_max(root.left);
      m.left := l;
      m.right := root.right;
      free(root);
      assert acc(m) &*& tree(l) &*& tree(root.right);
      return m;
    }
  } else if (root.data > value) {
    root.left := remove(root.left, value);
    assert acc(root) &*& tree(root.left) &*& tree(root.right);
    return root;
  } else {
    root.right := remove(root.right, value);
    return root;
  }
}