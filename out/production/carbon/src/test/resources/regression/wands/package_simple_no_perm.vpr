// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

/* This example encodes and specifies an iterative computation of the
 * sum of a recursively defined linked-list. Magic wands are used to
 * book-keep permissions in the loop.
 */

field val: Int
field next: Ref


method t01(ys: Ref) 
  requires ys != null
{
  //:: ExpectedOutput(package.failed:assertion.false)
  package true --* false
}

method t02(x:Int) 
{
  package x >= 2 --* x >=2 && x >=1 
  
  //:: ExpectedOutput(assert.failed:assertion.false)
  assert false
}

method t03(x: Int)
  requires x == 0
{
  package x==1 --* false 
  
  //:: ExpectedOutput(assert.failed:assertion.false)
  assert false

}

