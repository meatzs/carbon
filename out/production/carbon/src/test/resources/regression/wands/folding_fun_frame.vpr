// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

/* This example encodes and specifies an iterative computation of the
 * sum of a recursively defined linked-list. Magic wands are used to
 * book-keep permissions in the loop.
 */

field val: Int
field next: Ref

/* Linked-list abstract predicate. Contains access to the fields of the current
 * node ys, and transitively, to the fields of all nodes in the tail.
 */
predicate List(ys: Ref) {
  acc(ys.val) && acc(ys.next) && (ys.next != null ==> acc(List(ys.next)))
}

/* Pure function that computes the sum in a straight-forward, recursive way. */
function sum_rec(ys: Ref): Int
  requires acc(List(ys))
{ unfolding List(ys) in ys.val + (ys.next == null ? 0 : sum_rec(ys.next)) }


method t01(xs:Ref)
requires acc(List(xs)) 
{
  var i:Int
  i := sum_rec(xs) 
  unfold List(xs) 
  
  package true --* (folding List(xs) in acc(List(xs)) && sum_rec(xs)==i)

  //:: ExpectedOutput(assert.failed:assertion.false)
  assert false  
}
