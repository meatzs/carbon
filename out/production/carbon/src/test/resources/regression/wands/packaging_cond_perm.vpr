// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

field f: Int
field next: Ref


method t01(x: Ref) 
{
  //should fail since not enough permission to evaluate x.f > 0 ? 1/4:1/2 
  //:: ExpectedOutput(package.failed:insufficient.permission)
    package acc(x.f,1/2) && x.f > -1 --* (acc(x.f, (x.f > 0 ? 1/4: 1/2)) ) 
}


method t02(x: Ref) 
{
  inhale acc(x.f,1/2)
  package acc(x.f,1/2) && x.f > 0 --* (acc(x.f, 1/4) && acc(x.f, (x.f > 0 ? 1/2: 1/4)) )
    
  exhale acc(x.f,1/4)
  
//:: ExpectedError(exhale.failed:insufficient.permission)  
  exhale acc(x.f,1/4)
}

method t03(x: Ref) 
requires x != null
requires acc(x.f,3/4)
{
  package true --* (acc(x.f, 1/4) && acc(x.f, (x.f > 0 ? 1/4: 1/2)) )
    
//:: ExpectedError(exhale.failed:insufficient.permission)
  exhale(acc(x.f,1/4)) //shouldn't work, since can't prove that x.f > 0
}

method t04(x: Ref) 
requires x != null 
requires acc(x.f,3/4) 
requires x.f > 0 
{
  package true --* (acc(x.f, 1/4) && acc(x.f, (x.f > 0 ? 1/4: 1/2)) )
  exhale(acc(x.f,1/4)) //should work
 
  //:: ExpectedOutput(assert.failed:assertion.false)
  assert false;
}

method t05(x: Ref) 
requires x != null 
requires acc(x.f,3/4) 
requires x.f > 0 
{
  package true --* (acc(x.f, 1/4) && acc(x.f, (x.f > 0 ? 1/4: 1/2)) )

  //:: ExpectedError(exhale.failed:insufficient.permission)  
  exhale(acc(x.f,1/2))
}

