// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

/* This example encodes and specifies an iterative computation of the
 * sum of a recursively defined linked-list. Magic wands are used to
 * book-keep permissions in the loop.
 */

field f: Int
field next: Ref


method t01(ys: Ref) 
  requires ys != null
  requires acc(ys.f,1/3)
{
  package acc(ys.f,1/3) --* packaging (acc(ys.f,1/3) --* acc(ys.f)) in true
    
  //:: ExpectedOutput(assert.failed:assertion.false)
  assert false
}

method t02(x: Ref) 
{
  
  inhale acc(x.f,1/2)
  
  //this package should succeed, but note on the right hand side for acc(x.f,1/4) the permission is transferred from the current state and in the current state itself the value of x.f is not known. In the transfer of acc(x.f,1/2) in the packaging ghost operation we learn that x.f is 2 in the current state but that information can generally only be used until the packaging ghost operation is finished executing. So in the current version of Carbon (23.08) that fact won't be available when transferring acc(x.f,1/4), hence it doesn't verify currently in Carbon.
  package acc(x.f,1/4)&&x.f==2 --* packaging (true --* acc(x.f,1/2)&&x.f == 2) in 
    acc(x.f,1/4)&&x.f==2
   
   
  //:: ExpectedOutput(assert.failed:assertion.false)
  assert false
  
}

method t03(x: Ref) 
{
  //:: ExpectedOutput(package.failed:assertion.false)
  package acc(x.f,1/2)&&x.f==2 --* packaging (acc(x.f,1/2)&&x.f==3 --* false) in true
   
}

method t04(x: Ref) 
{
  package acc(x.f,1/2)&&x.f==2 --* packaging (acc(x.f,1/2)&&x.f==3 --* acc(x.f)&&false) in true

  //:: ExpectedOutput(assert.failed:assertion.false)
  assert false  
}
